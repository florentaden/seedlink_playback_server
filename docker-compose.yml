networks:
  slnet:
    name: slnet
    driver: bridge
    attachable: false

volumes:
  miniseed-data:
    driver: local
  plots:
    driver: local

services:
  ringserver:
    build:
      context: ./ringserver
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "18000"]
      interval: 5s
      timeout: 2s
      retries: 5
    networks:
      - slnet
    ports:
      - "16000:16000"
      - "18000:18000"
    volumes:
      - miniseed-data:/data/miniseed
    entrypoint:
      /opt/ringserver/ringserver -v -Rd /ringserver/ring -DL 16000 -SL 18000 -T /tlog -I "XX Seismic Network" -MSSCAN "/data/miniseed/ StateFile=scan.state InitCurrentState=y"

  playback:
    build:
      context: ./playback
    depends_on:
      ringserver:
        condition: service_healthy
    networks:
      - slnet
    volumes:
      - miniseed-data:/data/miniseed
      - ./mseed_files:/mseed_files
    environment:
      - MSEED_FILE=*
    restart: always
    entrypoint:
      python playback.py

  client:
    build:
      context: ./seedlink_client
    depends_on:
      ringserver:
        condition: service_healthy
    networks:
      - slnet
    volumes:
      - plots:/plots
    entrypoint: 
      sh -c "sleep 20 && python seedlink_client.py"

  webserver:
    build:
      context: ./webserver
    volumes:
      - plots:/app/plots
    networks:
      - slnet
    ports:
      - "8080:8080"
    depends_on:
      - client
    entrypoint: 
      sh -c "sleep 30 && python3 -m http.server 8080"